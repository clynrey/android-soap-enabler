#**
    Android SOAP Enabler is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, 
    or any later version.

    Android SOAP Enabler is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with Android SOAP Enabler.  If not, see <http://www.gnu.org/licenses/>.

    Â©2011, Android SOAP Enabler Development Team
*#/**
 * GENERATED CODE - DO NOT EDIT THIS FILE
 * generated from bean.java.vm
 */
package ${type.namespace.toJavaPackage()};

import fr.norsys.asoape.xml.binding.annotation.XmlElement;
import fr.norsys.asoape.xml.binding.annotation.XmlRootElement;
import fr.norsys.asoape.xml.binding.annotation.XmlType;
import fr.norsys.asoape.xml.binding.annotation.XmlElement.Cardinality;

#if( $element )
@XmlRootElement( name="${element.name}", namespace="${element.namespace.name}" )
#end
#set ($i = 1)
@XmlType( propOrder = { #foreach( $member in ${type.members} )#if ($i < ${type.members.size()})"${member.name}", #else"${member.name}"#end #set ($i = $i + 1)#end} )
#if( $type.abstract )
public abstract class ${type.toJavaType()}
#else
public class ${type.toJavaType()}
#end
#if( $type.extension )
	extends ${type.extension.toJavaType()}
#end
#if( $isBeanSerializable )
	implements java.io.Serializable
#end
{
#foreach( $member in ${type.members} )
#set ( $memberName = ${member.name} )
#if ( ${string.isJavaKeyword(${member.name})} )
#set ( $memberName = ${member.name.toUpperCase()} )
#end
#if( $member.maxOccurs != "1" )
	@XmlElement( name = "${member.name}", targetType=${member.type.toFullQualifiedJavaType()}.class, cardinality = Cardinality.MANY )
	private java.util.List<${member.type.toFullQualifiedJavaType()}> $memberName = new java.util.ArrayList<${member.type.toFullQualifiedJavaType()}>();
#else
#if ($member.minOccurs != "0")
	@XmlElement( name = "${member.name}", targetType=${member.type.toFullQualifiedJavaType()}.class, cardinality = Cardinality.ONE, nullable = false )
#else
	@XmlElement( name = "${member.name}", targetType=${member.type.toFullQualifiedJavaType()}.class, cardinality = Cardinality.ONE )
#end
	private ${member.type.toFullQualifiedJavaType()} $memberName;
#end

#end
#foreach( $member in ${type.members} )
#set ( $memberName = ${member.name} )
#if ( ${string.isJavaKeyword(${member.name})} )
#set ( $memberName = ${member.name.toUpperCase()} )
#end
#if( $member.maxOccurs != "1" )
#set ( $capitalizedName = ${string.capitalize(${member.name})} )
	public void set${capitalizedName}(java.util.List<${member.type.toFullQualifiedJavaType()}> $memberName)
	{
		this.$memberName = $memberName;
	}

	public java.util.List<${member.type.toFullQualifiedJavaType()}> get${capitalizedName}()
	{
		return $memberName;
	}

#else
#set ( $capitalizedName = ${string.capitalize(${member.name})} )
	public void set${capitalizedName}(${member.type.toFullQualifiedJavaType()} $memberName)
	{
		this.$memberName = $memberName;
	}

	public ${member.type.toFullQualifiedJavaType()} get${capitalizedName}()
	{
		return $memberName;
	}

#end
#end
}
